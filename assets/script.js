const navToggle=document.querySelector('[data-nav-toggle]');const navList=document.querySelector('[data-nav]');const header=document.querySelector('[data-header]');
if(navToggle&&navList){navToggle.addEventListener('click',()=>{const open=navList.getAttribute('data-open')==='true';navList.setAttribute('data-open',String(!open));navToggle.setAttribute('aria-expanded',String(!open));});}
document.querySelectorAll('a[href^="#"]').forEach(a=>{a.addEventListener('click',e=>{const id=a.getAttribute('href');if(id&&id.length>1){const el=document.querySelector(id);if(el){e.preventDefault();el.scrollIntoView({behavior:'smooth',block:'start'});navList?.setAttribute('data-open','false');navToggle?.setAttribute('aria-expanded','false');}}});});
let lastY=0;window.addEventListener('scroll',()=>{const y=window.scrollY;if(!header)return;if(y>10&&lastY<=10)header.classList.add('scrolled');else if(y<=10&&lastY>10)header.classList.remove('scrolled');lastY=y;});
const io=new IntersectionObserver(entries=>{for(const entry of entries){if(entry.isIntersecting){entry.target.classList.add('visible');io.unobserve(entry.target);}}},{threshold:.12});document.querySelectorAll('[data-observe]').forEach(el=>io.observe(el));
const openBtns=document.querySelectorAll('[data-open]');const closeBtns=document.querySelectorAll('[data-close]');openBtns.forEach(btn=>{const id=btn.getAttribute('data-open');const modal=document.getElementById(id);if(!modal)return;btn.addEventListener('click',()=>modal.showModal());});closeBtns.forEach(btn=>btn.addEventListener('click',()=>{document.querySelectorAll('dialog[open]').forEach(m=>m.close());}));document.addEventListener('keydown',e=>{if(e.key==='Escape')document.querySelectorAll('dialog[open]').forEach(m=>m.close());});